//AppConfig Params
def applicationName = "organization"
def envName = "ksa-dev"
def configName = "ksa-dev"
def clientId = "${applicationName}"-"${envName}"


//Helm Params
def branchName      = "ksa-compliance"
def gitServicRepo   = "git@github.com:VIWELL-Tech/api-backend-main.git"
def EnvName         = "ksa-dev"
def serviceName     = "organization"
def registryId      = "814880204573"
def awsRegion       = "us-east-1"
def ecrUrl          = "814880204573.dkr.ecr.us-east-1.amazonaws.com"
def awsProfile      = ""
def k8sContext      = "dev"
def awsCredsId      = ""
def namespace       = "ksa-dev"
def HelmNamespace   = "ksa-dev"
def helmDir         = "ksa-dev/Helm-charts/organization"
def gitHelmUrl      = "git@github.com:VIWELL-Tech/devops-iac.git"
def dockerfile      = "apps/${serviceName}/Dockerfile"


node("dev"){
  try {
      notifyBuild('STARTED')


    stage ("Checkout the service code")
    { 
      sh "rm -rf * .[!.]*" 
      //checkout([$class: 'GitSCM', branches: [[name: "${branchName}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: "${gitServicRepo}"]]])
      //sh "git submodule update --init --recursive"
      sh "git clone  -b ${branchName} ${gitServicRepo}" 
      sh "cd api-backend-main && git submodule update --init common" 
      sh "cd api-backend-main && git submodule update --init apps/${serviceName}"
      sh "cd api-backend-main/apps/${serviceName} && git checkout origin/${branchName} && git rev-parse --short HEAD > commit_id"
      commitId= readFile("api-backend-main/apps/${serviceName}/commit_id").trim()
      env.custom_var = commitId

    }



      //   stage ('SonarQube Analysis')
      //  {  
          
      //     sh"cd main/apps/${serviceName} && sonar-scanner \
      //         -Dsonar.projectKey=${serviceName}-dev \
      //         -Dsonar.sources=. \
      //         -Dsonar.host.url=http://10.20.2.120:9000 \
      //         -Dsonar.login=4cbd47d3403b2dce444cfe3f7bc09d1a3b56a3ab"
      //  }


    stage ('Build Docker Image')
       {  
          sh ("rm -rf .git iac")
          sh ("cd api-backend-main && docker build --no-cache -t  ${serviceName}:${commitId} -f ${dockerfile} .")
       }

    stage ('tag Image With Build Number ')
       {
           sh ("docker tag ${serviceName}:${commitId}  ${ecrUrl}'/'${serviceName}:${commitId}")
       }
    stage ('login to ECR ')
       {
            sh("aws ecr get-login-password --region ${awsRegion}  | docker login --username AWS --password-stdin ${ecrUrl} ")      
        // sh("aws ecr get-login --registry-ids ${registryId}  --region ${awsRegion} --no-include-email --profile ${awsProfile}")
       }
     stage ('Swtich context ')
        {
           sh ("kubectl config use-context ${k8sContext}")
        }
    stage('Push Docker Image With Build Number To ECR')
       {
          sh("docker push ${ecrUrl}/${serviceName}:${commitId}")   
       }
// start editing the build number here

        stage('Update Helm chart version') {
                script {
                    // Clone the repository
                    sh 'git clone git@github.com:VIWELL-Tech/devops-argocd.git'
                    dir('devops-argocd') {  // Change directory to the cloned repository
                        // Update the Chart.yaml file with the new version
                        sh """
                            sed -i 's/^appVersion:.*/appVersion: "${commitId}"/' ${helmDir}/Chart.yaml
                            sed -i 's/^AppVersion:.*/AppVersion: "${commitId}"/' ${helmDir}/values.yaml
                            
                        """
                        // Commit and push the changes
                        sh """
                            git add .
                            git commit -m "chore: version update of ${serviceName} to dev-${BUILD_NUMBER} changeset ${commitId}" || true
                            git push
                            sleep 120                        """
                    }
                }
        }
        



    // stage ("Checkout the iac repo")
    // { 
    //   sh "rm -rf * .[!.]*" 
    //   checkout([$class: 'GitSCM', branches: [[name: "main"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: "${gitHelmUrl}"]]])
      
    // }

    // stage("Get the env varaibles from Appconfig")
    // {
    //   sh "aws appconfig get-configuration --application ${applicationName} --environment ${envName} --configuration ${configName} --client-id ${clientId} ${helmDir}/templates/configmap.yaml"
    //   sh "aws appconfig get-configuration --application common --environment dev --configuration dev --client-id common-dev ${helmDir}/templates/configmap-common.yaml"
    // }
    
    // stage ("Deploy ${serviceName} to ${branchName} Enviroment")
    //    {
    //      sh ("helm upgrade --install --namespace=${HelmNamespace} ${serviceName}  ${helmDir} --set image.repository=${ecrUrl}/${serviceName} --set image.tag=${commitId}")
    //      sh ("kubectl -n ${namespace} rollout status deploy/${serviceName}")
    //      sh "rm -rf * .[!.]*" 
    //    }

    stage('Remove local images')
       {
        sh("docker rmi -f ${ecrUrl}/${serviceName}:${commitId} || :")
        sh("docker rmi -f ${serviceName}:${commitId} || :")
      //  sh("docker rmi -f ${serviceName}:${branchName}-${commitId}-${BUILD_NUMBER} || :")
       // sh("docker rmi -f ${serviceName}:${branchName}-${commitId}-${previousBuild} || :")
       }

    } catch (e) {
      currentBuild.result = "FAILED"
      throw e
      } finally {
          notifyBuild(currentBuild.result)
        }
}


def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'
  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"
  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }
  // Send notifications
  slackSend (color: colorCode, message: summary)
  slackSend channel: 'jenkins', color: colorCode, message: summary, teamDomain: 'TeamHome', tokenCredentialId: 'slack'
 }

//AppConfig Params
def applicationName = "presenter"
def envName = "test"
def configName = "test"
def clientId = "${applicationName}"-"${envName}"


//Helm Params
def branchName      = "test"
def gitServicRepo   = "git@github.com:VIWELL-Tech/api-backend-metrics-presenter.git"
def EnvName         = "test"
def serviceName     = "presenter"
def registryId      = "814880204573"
def awsRegion       = "us-east-1"
def ecrUrl          = "814880204573.dkr.ecr.us-east-1.amazonaws.com"
def awsProfile      = ""
def k8sContext      = "dev"
def awsCredsId      = ""
def namespace       = "test"
def HelmNamespace   = "test"
def helmDir         = "test/Helm-charts/metrics-presenter"
def gitHelmUrl      = "git@github.com:VIWELL-Tech/devops-iac.git"
def dockerfile      = "Dockerfile"


node("dev"){
  try {
      notifyBuild('STARTED')


     stage ("Checkout the service code")
    { 
    
      checkout([$class: 'GitSCM', branches: [[name: "${branchName}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: "${gitServicRepo}"]]])
      sh "git rev-parse --short HEAD > commit_id"
      commitId= readFile("commit_id").trim()
    }


    stage ('Build Docker Image')
       {  sh "echo ${env.custom_var}"
          sh ("rm -rf .git iac")
          sh ("docker build --no-cache -t  ${serviceName}:${namespace}-${commitId}-${BUILD_NUMBER} -f ${dockerfile} .")
       }

    stage ('tag Image With Build Number ')
       {
           sh ("docker tag ${serviceName}:${namespace}-${commitId}-${BUILD_NUMBER}  ${ecrUrl}'/'${serviceName}:${namespace}-${commitId}-${BUILD_NUMBER}")
       }
    stage ('login to ECR ')
       {
            sh("aws ecr get-login-password --region ${awsRegion}  | docker login --username AWS --password-stdin ${ecrUrl} ")      
        // sh("aws ecr get-login --registry-ids ${registryId}  --region ${awsRegion} --no-include-email --profile ${awsProfile}")
       }

    stage('Push Docker Image With Build Number To ECR')
       {
          sh("docker push ${ecrUrl}/${serviceName}:${namespace}-${commitId}-${BUILD_NUMBER}")   
       }
// start editing the build number here

        stage('Update Helm chart version') {
                script {
                    // Clone the repository
                    sh 'git clone git@github.com:VIWELL-Tech/devops-argocd.git'
                    dir('devops-argocd') {  // Change directory to the cloned repository
                        // Update the Chart.yaml file with the new version
                        sh """
                            sed -i 's/^appVersion:.*/appVersion: "${namespace}-${commitId}-${BUILD_NUMBER}"/' ${helmDir}/Chart.yaml
                            sed -i 's/^AppVersion:.*/AppVersion: "${namespace}-${commitId}-${BUILD_NUMBER}"/' ${helmDir}/values.yaml
                            
                        """
                        // Commit and push the changes
                        sh """
                            git add .
                            git commit -m "chore: version update of ${serviceName} to dev-${BUILD_NUMBER} changeset ${commitId}" || true
                            git push
                            sleep 120                        """
                    }
                }
        }
        


    stage('Remove local images')
       {
        sh("docker rmi -f ${ecrUrl}/${serviceName}:${namespace}-${commitId}-${BUILD_NUMBER} || :")
        sh("docker rmi -f ${serviceName}:${namespace}-${commitId}-${BUILD_NUMBER} || :")
       }

    } catch (e) {
      currentBuild.result = "FAILED"
      throw e
      } finally {
          notifyBuild(currentBuild.result)
        }
}


def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'
  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"
  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }
  // Send notifications
  slackSend (color: colorCode, message: summary)
  slackSend channel: 'jenkins', color: colorCode, message: summary, teamDomain: 'TeamHome', tokenCredentialId: 'slack'
 }

def applicationName = "backendmain"
def envName = "dev"
def configName = "dev"
def clientId = "${applicationName}-${envName}"

// Helm Params
def branchName = "main"
def gitServicRepo = "git@github.com:VIWELL-Tech/api-v1-backend.git"
def EnvName = "dev"
def serviceName = "backendmain"
def registryId = "814880204573"
def awsRegion = "us-east-1"
def ecrUrl = "814880204573.dkr.ecr.us-east-1.amazonaws.com"
def awsProfile = ""
def k8sContext = "dev"
def awsCredsId = ""
def namespace = "dev"
def HelmNamespace = "dev"
def dockerfile = "api-backend-main/Dockerfile"
def helmDir = "dev/Helm-charts"  

// List of microservices
def microservices = [
    'api-gateway',
    'assessmentv2',
    'auth',
    'avatar',
    'booking',
    'category',
    'content',
    'email',
    'favorite',
    'general',
    'logger',
    'loyalty',
    'media',
    'notification',
    'organization',
    'personalisation',
    'pillar',
    'progress',
    'push-notification',
    'rbac',
    'review',
    'reward',
    'reward-partner',
    'schedular',
    'tag',
    'wearable',
    'wearable-connect'
]

node {
    try {
        notifyBuild('STARTED')

        stage('Checkout the service code') {
            sh "rm -rf * .[!.]*"
            sh "git clone -b ${branchName} ${gitServicRepo} api-backend-main"
        }

        stage('Build Docker Image') {
             sh "cd /home/dev/workspace/dockerfiletest/api-backend-main/"
             def commitId = sh(script: 'git -C api-backend-main rev-parse --short HEAD', returnStdout: true).trim()
             sh " git -C api-backend-main tag ${BUILD_NUMBER}-${commitId}"
             sh "git -C api-backend-main push origin --tags"
        }

        stage('Build Docker Image') {
            sh "cd /home/dev/workspace/dockerfiletest"
            def commitId = sh(script: 'git -C api-backend-main rev-parse --short HEAD', returnStdout: true).trim()
            env.commitId = commitId
            sh "docker build --no-cache -t ${ecrUrl}/${serviceName}:${BUILD_NUMBER}-${commitId} -f ${dockerfile} api-backend-main/"
        }

        stage('Tag Image With Build Number') {
            sh "docker tag ${ecrUrl}/${serviceName}:${BUILD_NUMBER}-${commitId} ${ecrUrl}/${serviceName}:${commitId}-${BUILD_NUMBER}"
        }

        stage('Login to ECR') {
            sh "aws ecr get-login-password --region ${awsRegion} | docker login --username AWS --password-stdin ${ecrUrl}"
        }

        stage('Push Docker Image With Build Number To ECR') {
            sh "docker push ${ecrUrl}/${serviceName}:${BUILD_NUMBER}-${commitId}"
        }

        stage('Update Helm chart version') {
            sh "git clone git@github.com:VIWELL-Tech/devops-argocd.git"
            for (microservice in microservices) {
                script {
                   // sh "rm -rf * .[!.]*"
                    dir('devops-argocd') {  // Change directory to the cloned repository
                        // Update the Chart.yaml file with the new version
                        sh """
                            echo "Updating the chart for ${microservice}"
                            sed -i 's/^appVersion:.*/appVersion: ${BUILD_NUMBER}-${commitId}/' ${helmDir}/${microservice}/Chart.yaml 
                            sed -i 's/^AppVersion:.*/AppVersion: ${BUILD_NUMBER}-${commitId}/' ${helmDir}/${microservice}/values.yaml
                        """
                    }
                }
            }

            script {
                dir('devops-argocd') {
                    sh """
                        git add .
                        git commit -m 'Updated charts to version ${BUILD_NUMBER}-${commitId}'
                        git push origin main
                    """
                }
            }
        }

    } catch (e) {
        currentBuild.result = "FAILED"
        throw e
    } finally {
        notifyBuild(currentBuild.result)
    }
}

def notifyBuild(String buildStatus = 'STARTED') {
    buildStatus = buildStatus ?: 'SUCCESSFUL'
    def colorCode = buildStatus == 'SUCCESSFUL' ? '#00FF00' : '#FF0000'
    def summary = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
    slackSend(color: colorCode, message: summary)
}

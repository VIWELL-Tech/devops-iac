//AppConfig Params
def applicationName = "activity"
def envName = "dev"
def configName = "dev"
def clientId = "${applicationName}"-"${envName}"


//Helm Params
def branchName      = "main"
def gitServicRepo   = "git@github.com:VIWELL-Tech/api-v1-backend.git"
def EnvName         = "dev"
def serviceName     = "noname"
def registryId      = "814880204573"
def awsRegion       = "us-east-1"
def ecrUrl          = "814880204573.dkr.ecr.us-east-1.amazonaws.com"
def awsProfile      = ""
def k8sContext      = "dev"
def awsCredsId      = ""
def namespace       = "dev"
def HelmNamespace   = "dev"
//def helmDir         = "dev/Helm-charts/activity"
//def gitHelmUrl      = "git@github.com:VIWELL-Tech/devops-iac.git"
def dockerfile      = "/api-backend-main/Dockerfile"
def commitId = "123"


node {
  try {
      notifyBuild('STARTED')


    stage ("Checkout the service code")
    { 
       sh "rm -rf * .[!.]*"
       sh  "mkdir api-backend-main && cd api-backend-main"
       dir("api-backend-main") {
         sh "git init"
         sh "git remote add origin ${gitServicRepo}"
         sh "git fetch && git checkout origin/${branchName} && git pull origin ${branchName} --ff"
        // sh "git submodule update --init --recursive && git submodule foreach 'git checkout origin/${branchName} && git pull origin ${branchName} --ff || :'"
       }
     //  sh "cd api-backend-main/apps/${serviceName} && git checkout origin/${branchName} && git rev-parse --short HEAD > commit_id"
      // commitId=readFile("api-backend-main/apps/${serviceName}/commit_id").trim()
       //env.custom_var = commitId
    }





    stage ('Build Docker Image')
       {  sh "echo ${env.custom_var}"
          sh ("rm -rf .git iac")
          sh ("docker build --no-cache -t  ${serviceName}:${commitId}-${BUILD_NUMBER} -f ${dockerfile} .")
       }

    stage ('tag Image With Build Number ')
       {
           sh ("docker tag ${serviceName}:${commitId}-${BUILD_NUMBER}  ${ecrUrl}'/'${serviceName}:${commitId}-${BUILD_NUMBER}")
       }
    stage ('login to ECR ')
       {
            sh("aws ecr get-login-password --region ${awsRegion}  | docker login --username AWS --password-stdin ${ecrUrl} ")      
        // sh("aws ecr get-login --registry-ids ${registryId}  --region ${awsRegion} --no-include-email --profile ${awsProfile}")
       }

    stage('Push Docker Image With Build Number To ECR')
       {
          sh("docker push ${ecrUrl}/${serviceName}:${commitId}-${BUILD_NUMBER}")   
       }


    stage('Remove local images')
       {
        sh("docker rmi -f ${ecrUrl}/${serviceName}:${namespace}-${commitId}-${BUILD_NUMBER} || :")
        sh("docker rmi -f ${serviceName}:${namespace}-${commitId}-${BUILD_NUMBER} || :")
      //  sh("docker rmi -f ${serviceName}:${branchName}-${commitId}-${BUILD_NUMBER} || :")
       // sh("docker rmi -f ${serviceName}:${branchName}-${commitId}-${previousBuild} || :")
       }

    } catch (e) {
      currentBuild.result = "FAILED"
      throw e
      } finally {
          notifyBuild(currentBuild.result)
        }
}


def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'
  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"
  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }
  // Send notifications
  slackSend (color: colorCode, message: summary)
  slackSend channel: 'jenkins', color: colorCode, message: summary, teamDomain: 'TeamHome', tokenCredentialId: 'slack'
 }

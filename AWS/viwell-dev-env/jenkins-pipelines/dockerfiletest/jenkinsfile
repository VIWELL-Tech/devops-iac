def applicationName = "api-backend-main"
def envName = "dev"
def configName = "dev"
def clientId = "${applicationName}-${envName}"

// Helm Params
def branchName = "main"
def gitServicRepo = "git@github.com:VIWELL-Tech/api-v1-backend.git"
def EnvName = "dev"
def serviceName = "noname"
def registryId = "814880204573"
def awsRegion = "us-east-1"
def ecrUrl = "814880204573.dkr.ecr.us-east-1.amazonaws.com"
def awsProfile = ""
def k8sContext = "dev"
def awsCredsId = ""
def namespace = "dev"
def HelmNamespace = "dev"
def dockerfile = "api-backend-main/Dockerfile"
node {
    try {
        notifyBuild('STARTED')

        stage("Checkout the service code") {
            sh "rm -rf * .[!.]*"
            sh "git clone -b ${branchName} ${gitServicRepo} api-backend-main"
        }

        stage('Build Docker Image') {
            sh  "cd /home/dev/workspace/dockerfiletest"
            def commitId = sh(script: 'git -C api-backend-main rev-parse --short HEAD', returnStdout: true).trim()
            env.commitId = shortCommitId
            sh "docker build --no-cache -t  ${serviceName}:${commitId}-${BUILD_NUMBER} -f ${dockerfile} api-backend-main/"

        }

        stage('Tag Image With Build Number') {
            sh "docker tag ${serviceName}:${commitId}-${BUILD_NUMBER} ${ecrUrl}/${serviceName}:${commitId}-${BUILD_NUMBER}"
    }

        stage('Login to ECR') {
            sh "aws ecr get-login-password --region ${awsRegion} | docker login --username AWS --password-stdin ${ecrUrl}"
        }

        stage('Push Docker Image With Build Number To ECR') {
            sh "docker push ${ecrUrl}/${serviceName}:${commitId}-${BUILD_NUMBER}"
        }

        stage('Remove Local Images') {
            sh "docker rmi -f ${ecrUrl}/${serviceName}:${commitId}-${BUILD_NUMBER} || :"
            sh "docker rmi -f ${serviceName}:${commitId}-${BUILD_NUMBER} || :"
        }
    } catch (e) {
        currentBuild.result = "FAILED"
        throw e
    } finally {
        notifyBuild(currentBuild.result)
    }
}

def notifyBuild(String buildStatus = 'STARTED') {
    buildStatus = buildStatus ?: 'SUCCESSFUL'
    def colorCode = buildStatus == 'SUCCESSFUL' ? '#00FF00' : '#FF0000'
    def summary = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
    slackSend(color: colorCode, message: summary)
}

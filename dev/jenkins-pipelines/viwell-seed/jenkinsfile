//AppConfig Params
def applicationName = "viwell-seed"
def envName = "dev"
def configName = "dev"
def clientId = "${applicationName}"-"${envName}"


//Helm Params
def branchName      = "dev"
def gitServicRepo   = "git@github.com:VIWELL-Tech/api-backend-main.git"
def EnvName         = "dev"
def serviceName     = "viwell-seed"
def imageTag        = "${EnvName}-${BUILD_NUMBER}"
def registryId      = "814880204573"
def awsRegion       = "us-east-1"
def ecrUrl          = "814880204573.dkr.ecr.us-east-1.amazonaws.com"
def awsProfile      = ""
def k8sContext      = "dev"
def awsCredsId      = ""
def namespace       = "dev"
def HelmNamespace   = "dev"
def helmDir         = "dev/Helm-charts/viwell-seed"
def gitHelmUrl      = "git@github.com:VIWELL-Tech/devops-iac.git"
def dockerfile      = "seed/Dockerfile"


node("dev"){
  try {
      notifyBuild('STARTED')


        stage("delete old job"){
         sh "kubectl delete job/viwell-seed -n dev &2> /dev/null"
        } 


    stage ("Checkout the service code")
    { 
      sh "rm -rf * .[!.]*" 
      checkout([$class: 'GitSCM', branches: [[name: "${branchName}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: "${gitServicRepo}"]]])
      sh "git submodule update --init --recursive"
      
    }



    stage ('Build Docker Image')
       {  
          sh ("rm -rf .git iac")
          sh (" docker build -t  ${serviceName}:${imageTag} -f ${dockerfile} .")
       }

    stage ('tag Image With Build Number ')
       {
           sh ("docker tag ${serviceName}:${imageTag}  ${ecrUrl}'/'${serviceName}:${imageTag}")
       }
    stage ('login to ECR ')
       {
            sh("aws ecr get-login-password --region ${awsRegion}  | docker login --username AWS --password-stdin ${ecrUrl} ")      
        // sh("aws ecr get-login --registry-ids ${registryId}  --region ${awsRegion} --no-include-email --profile ${awsProfile}")
       }
     stage ('Swtich context ')
        {
           sh ("kubectl config use-context ${k8sContext}")
        }
    stage('Push Docker Image With Build Number To ECR')
       {
          sh("docker push ${ecrUrl}/${serviceName}:${imageTag}")   
       }


    // stage ("Checkout the iac repo")
    // { 
    //   sh "rm -rf * .[!.]*" 
    //   checkout([$class: 'GitSCM', branches: [[name: "main"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: "${gitHelmUrl}"]]])
      
    // }

    // stage("Get the env varaibles from Appconfig")
    // {
    //   sh "aws appconfig get-configuration --application ${applicationName} --environment ${envName} --configuration ${configName} --client-id ${clientId} ${helmDir}/templates/configmap.yaml"
    //   // sh "aws appconfig get-configuration --application common --environment dev --configuration dev --client-id common-dev ${helmDir}/templates/configmap-common.yaml"
    // }
    
    // stage ("Deploy ${serviceName} to ${branchName} Enviroment")
    //    {
    //      sh ("helm upgrade --install --namespace=${HelmNamespace} ${serviceName}  ${helmDir} --set image.repository=${ecrUrl}/${serviceName} --set image.tag=${imageTag}")
    //     //  sh ("kubectl -n ${namespace} rollout status deploy/${serviceName}")
    //      sh "rm -rf * .[!.]*" 
    //    }

    stage('Remove local images')
       {
        sh("docker rmi -f ${ecrUrl}/${serviceName}:${imageTag} || :")
        sh("docker rmi -f ${serviceName}:${imageTag} || :")
      //  sh("docker rmi -f ${serviceName}:${branchName}-${commitId}-${BUILD_NUMBER} || :")
       // sh("docker rmi -f ${serviceName}:${branchName}-${commitId}-${previousBuild} || :")
       }

    } catch (e) {
      currentBuild.result = "FAILED"
      throw e
      } finally {
          notifyBuild(currentBuild.result)
        }
}


def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'
  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"
  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }
  // Send notifications
  slackSend (color: colorCode, message: summary)
  slackSend channel: 'jenkins', color: colorCode, message: summary, teamDomain: 'TeamHome', tokenCredentialId: 'slack'
 }